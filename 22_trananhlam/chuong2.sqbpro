<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="chuong2.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="864"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/><expanded_item id="4" parent="1"/></tab_structure><tab_browse><table title="student" custom_title="0" dock_id="1" table="4,7:mainstudent"/><dock_state state="000000ff00000000fd0000000100000002000005f4000002e6fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000005f40000011800ffffff000002580000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="course" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="29"/><column index="2" value="83"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="student" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="68"/><column index="2" value="140"/><column index="3" value="70"/><column index="4" value="62"/><column index="5" value="38"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL chuong2">DROP TABLE IF EXISTS student;
CREATE TABLE student (
    student_id INTEGER PRIMARY KEY,
    name TEXT,
    class TEXT,
    course_id INTEGER,
    score REAL
);
INSERT INTO student (student_id, name, class, course_id, score) VALUES
(1, 'Nguyen Minh Hoang', 'May Tinh', 12, 6.7),
(2, 'Tran Thi Lan', 'Kinh Te', 34, 9.2),
(3, 'Pham Van Nam', 'Toan Tin', 20, 7.9),
(4, 'Le Thanh Huyen', 'Toan Tin', 20, 7.2),
(5, 'Vu Quoc Anh', 'May Tinh', 24, 8.0),
(6, 'Dang Thuy Linh', 'May Tinh', 24, 5.5),
(7, 'Bui Tien Dung', 'Kinh Te', 34, 9.2),
(8, 'Ho Ngoc Mai', 'Toan Tin', 20, 8.8),
(9, 'Duong Huu Phuc', 'Kinh Te', 34, 7.2),
(10, 'Cao Thi Hanh', 'May Tinh', 7, 0);
SELECT * FROM student;
DROP TABLE IF EXISTS course ;
CREATE TABLE course (
    id INTEGER PRIMARY KEY,
    course_name TEXT
);
INSERT INTO course (id, course_name) VALUES
(12, 'Giai tich'),
(34, 'Thong ke'),
(26, 'Tin hoc');
SELECT * FROM course;

SELECT s.student_id, s.name, s.class, s.course_id, s.score, c.course_name
FROM student s
INNER JOIN course c ON s.course_id = c.id;

UPDATE student
SET course_id = (
    SELECT id FROM course 
    WHERE course_name = 'Tin hoc' -- Chọn môn phù hợp nếu có logic điền cụ thể
    LIMIT 1
)
WHERE course_id IS NULL;

DELETE FROM student
WHERE course_id NOT IN (SELECT id FROM course);

SELECT class, COUNT(*) AS total_students, AVG(score) AS avg_score
FROM student
GROUP BY class;

SELECT course_id, COUNT(*) AS total_students, AVG(score) AS avg_score
FROM student
GROUP BY course_id;

SELECT name, score,
       CASE 
           WHEN score &gt;= 9.0 THEN 'Xuất sắc'
           WHEN score BETWEEN 6.0 AND 8.9 THEN 'Tốt'
           ELSE 'Kém'
       END AS classification
FROM student;


SELECT name, score,
       RANK() OVER (ORDER BY score DESC) AS rank
FROM student;

SELECT class, name, score,
       RANK() OVER (PARTITION BY class ORDER BY score DESC) AS rank
FROM student;

SELECT course_id, name, score,
       RANK() OVER (PARTITION BY course_id ORDER BY score DESC) AS rank
FROM student;


WITH Ranking AS (
    SELECT name, score,
           RANK() OVER (ORDER BY score DESC) AS rank_high,
           RANK() OVER (ORDER BY score ASC) AS rank_low
    FROM student
)
SELECT * FROM Ranking
WHERE rank_high &lt;= 3 OR rank_low &lt;= 3;

UPDATE student
SET graduation_date = DATE('2025-03-08', '+' || 
                           (SELECT rank FROM temp_rank WHERE temp_rank.student_id = student.student_id) || ' years')
WHERE student_id IN (SELECT student_id FROM temp_rank);

SELECT * FROM student;


SELECT student_id, name, score, graduation_date FROM student ORDER BY graduation_date;
</sql><current_tab id="0"/></tab_sql></sqlb_project>
